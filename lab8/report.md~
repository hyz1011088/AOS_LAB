# Lab8 erport

## [练习0]	填写已有实验

使用系统中到meld工具，针对lab1/lab2/lab3/lab4/lab5/lab6/lab7中更改过的文件，进行代码更改。


## [练习1]	完成读文件操作的实现(需要编码)


【首先了解打开文件的处理流程,然后参考本实验后续的文件读写操作的过程分析,编写在sfs_inode.c中sfs_io_nolock读文件中数据的实现代码。】


一.课程问题：

1.请在实验报告中给出设计实现”UNIX的PIPE机制“的概要设方案,鼓励给出详细设计方案

```
  UNIX的PIPE机制概要设计方案：
    实现借助文件系统中的file结构和VFS的索引节点inode，将两个file同时指向同一个索引节点。主要的结构为：文件、写位置、读位置、锁。文件可用于不同进程的读写；写位置：写入时更新；读位置：读取时更新；锁：若读位置等于写位置时读取，那么等待这个锁。写后，如果有进程在等待，唤醒。读后，如果读位置小于写位置，且有进程在等待，唤醒；具体的实现函数如下：
    pipe_read()&pipre_write()
    pipe_write()使用标准库中的write()函数，对file进行写入，前提是没有程序在对这个文件进行读取操作。
    pipe_read()和write类似，但是当内存被锁定时直接返回错误信息，而非阻塞。
    
```


## [练习2]	完成基于文件系统的执行程序机制的实现(需要编码)

【改写proc.c中的load_icode函数和其他相关函数,实现基于文件系统的执行程序机制。执行:make	qemu。如果能看看到sh用户程序的执行界面,则基本成功了。如果在sh用户界面上可以执行”ls”,”hello”等其他放置在sfs文件系统中的其他执行程序,则可以认为本实验基本成功。】

一.请在实验报告中给出设计实现基于”UNIX的硬链接和软链接机制“的概要设方案，鼓励给出详细设计方案。

```
   UNIX的硬链接和软链接机制：
      1. 硬链接：`int vfs_link(char *old_path, char *new_path);`。创建new_file的文件，把inode指向old_path的inode，引用计数加1。读写操作的时候，会自动操作用一个inode，无需修改；删除操作时，引用计数减1，如果减至0，删除这个文件。
      2. 软链接：创建软链接时分配创建一个新的文件（这时创建了一个新的inode），并把old_path的内容存放到文件的内容中去，给该文件保存在磁盘上时disk_inode类型为SFS_TYPE_LINK。对于类型为SFS_TYPE_LINK的disk_inode，执行读写操作时，先读出old_path，然后对old_path执行读写操作；unlink时与删除一个普通文件相同。

```


## [实验分析]
本次实验涉及的是文件系统,通过分析了解ucore文件系统的总体架构设计,完善读写文件操作,从新实现基于文件系统的执行程序机制(即改写do_execve),从而可以完成执行存储在磁盘上的文件和实现文件读写等功能。通过完成本次实验,达到以下目标:
    了解基本的文件系统系统调用的实现方法;
    了解一个基于索引节点组织方式的Simple FS文件系统的设计与实现;
    了解文件系统抽象层-VFS的设计与实现;


一. 主要学习之处：
1. 文件系统和文件读写
2. VFS接口
3. 内存映射
4. 栈帧和命令行参数

二. 未涉及到地方：
    磁盘操作到的具体实现等。


## [与参考答案到区别]
由于基本都是在实验源码上添加功能，且实验提示较多，基本和参考答案没有区别。但是在实验过程中发现答案有如下问题：
1. proc.c中的load_icode函数中，uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);存在缓冲区溢出风险。
